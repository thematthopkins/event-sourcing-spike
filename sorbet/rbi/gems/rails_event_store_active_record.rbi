# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: ignore
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/rails_event_store_active_record/all/rails_event_store_active_record.rbi
#
# rails_event_store_active_record-2.2.0

module RailsEventStoreActiveRecord
end
class RailsEventStoreActiveRecord::MigrationGenerator < Rails::Generators::Base
  def create_migration; end
  def data_type; end
  def initialize(*args); end
  def migration_version; end
  def timestamp; end
end
class RailsEventStoreActiveRecord::MigrationGenerator::Error < Thor::Error
end
module RailsEventStoreActiveRecord::Event::GeneratedAttributeMethods
end
class RailsEventStoreActiveRecord::Event < ActiveRecord::Base
  include RailsEventStoreActiveRecord::Event::GeneratedAssociationMethods
  include RailsEventStoreActiveRecord::Event::GeneratedAttributeMethods
end
module RailsEventStoreActiveRecord::Event::GeneratedAssociationMethods
end
class RailsEventStoreActiveRecord::Event::ActiveRecord_Relation < ActiveRecord::Relation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include RailsEventStoreActiveRecord::Event::GeneratedRelationMethods
end
module RailsEventStoreActiveRecord::Event::GeneratedRelationMethods
end
class RailsEventStoreActiveRecord::Event::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include RailsEventStoreActiveRecord::Event::GeneratedRelationMethods
end
class RailsEventStoreActiveRecord::Event::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include RailsEventStoreActiveRecord::Event::GeneratedRelationMethods
end
module RailsEventStoreActiveRecord::EventInStream::GeneratedAttributeMethods
end
class RailsEventStoreActiveRecord::EventInStream < ActiveRecord::Base
  def autosave_associated_records_for_event(*args); end
  include RailsEventStoreActiveRecord::EventInStream::GeneratedAssociationMethods
  include RailsEventStoreActiveRecord::EventInStream::GeneratedAttributeMethods
end
module RailsEventStoreActiveRecord::EventInStream::GeneratedAssociationMethods
  def build_event(*args, &block); end
  def create_event!(*args, &block); end
  def create_event(*args, &block); end
  def event; end
  def event=(value); end
  def reload_event; end
end
class RailsEventStoreActiveRecord::EventInStream::ActiveRecord_Relation < ActiveRecord::Relation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include RailsEventStoreActiveRecord::EventInStream::GeneratedRelationMethods
end
module RailsEventStoreActiveRecord::EventInStream::GeneratedRelationMethods
end
class RailsEventStoreActiveRecord::EventInStream::ActiveRecord_Associations_CollectionProxy < ActiveRecord::Associations::CollectionProxy
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include RailsEventStoreActiveRecord::EventInStream::GeneratedRelationMethods
end
class RailsEventStoreActiveRecord::EventInStream::ActiveRecord_AssociationRelation < ActiveRecord::AssociationRelation
  extend ActiveRecord::Delegation::ClassSpecificRelation::ClassMethods
  include ActiveRecord::Delegation::ClassSpecificRelation
  include RailsEventStoreActiveRecord::EventInStream::GeneratedRelationMethods
end
class RailsEventStoreActiveRecord::WithDefaultModels
  def call; end
end
class RailsEventStoreActiveRecord::WithAbstractBaseClass
  def build_event_klass(instance_id); end
  def build_stream_klass(instance_id); end
  def call(instance_id: nil); end
  def initialize(base_klass); end
end
class RailsEventStoreActiveRecord::EventRepository
  def add_to_stream(event_ids, stream, expected_version); end
  def append_to_stream(records, stream, expected_version); end
  def compute_position(resolved_version, index); end
  def count(specification); end
  def delete_stream(stream); end
  def detect_index_violated(message); end
  def has_event?(event_id); end
  def import_hash(record, serialized_record); end
  def initialize(serializer:, model_factory: nil); end
  def last_stream_event(stream); end
  def link_to_stream(event_ids, stream, expected_version); end
  def optimize_timestamp(valid_at, created_at); end
  def raise_error(e); end
  def read(specification); end
  def serializer; end
  def start_transaction(&block); end
  def streams_of(event_id); end
  def update_messages(records); end
end
class RailsEventStoreActiveRecord::BatchEnumerator
  def batch_size; end
  def each; end
  def first; end
  def initialize(batch_size, total_limit, reader); end
  def reader; end
  def to_a; end
  def total_limit; end
end
class RailsEventStoreActiveRecord::EventRepositoryReader
  def count(spec); end
  def has_event?(event_id); end
  def initialize(event_klass, stream_klass, serializer); end
  def last_stream_event(stream); end
  def monotonic_id_batch_reader(spec, stream); end
  def newer_than_condition(specification); end
  def newer_than_or_equal_condition(specification); end
  def offset_limit_batch_reader(spec, stream); end
  def older_than_condition(specification); end
  def older_than_or_equal_condition(specification); end
  def order(spec); end
  def ordered(stream, spec); end
  def read(spec); end
  def read_scope(spec); end
  def record(record); end
  def serializer; end
  def start_condition(specification); end
  def start_condition_in_global_stream(specification); end
  def start_offset_condition(specification, record_id, search_in); end
  def stop_condition(specification); end
  def stop_condition_in_global_stream(specification); end
  def stop_offset_condition(specification, record_id, search_in); end
end
class RailsEventStoreActiveRecord::IndexViolationDetector
  def detect(message); end
  def detect_mysql(message); end
  def detect_postgres(message); end
  def detect_sqlite(message); end
  def initialize(event_store_events, event_store_events_in_streams); end
end
class RailsEventStoreActiveRecord::PgLinearizedEventRepository < RailsEventStoreActiveRecord::EventRepository
  def start_transaction(&proc); end
end
